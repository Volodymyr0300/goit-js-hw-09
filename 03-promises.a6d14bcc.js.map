{"mappings":"YAY2F,SAAlFA,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACT,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,QAAQC,IAAIJ,GAERA,EACFH,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAIP,IAAMU,EAAOC,SAASC,cAAc,aAGjCF,EAAEG,iBAAiB,UAAU,SAAAC,GAC9BA,EAAMC,iBAUN,IATA,IAAMC,EAAQC,OAAOP,EAAKQ,SAASlB,MAAMmB,OAEnCC,EAAOH,OAAOP,EAAKQ,SAASE,KAAKD,OAEjCE,EAASJ,OAAOP,EAAKQ,SAASG,OAAOF,OAGvCG,EAAW,EAENC,EAAI,EAAGA,GAAKF,EAAQE,GAAK,EAAG,CAKnCzB,EAJAwB,GAAYC,EAESP,GAASO,EAAI,GAAKH,GAGpCI,MAAK,SAAAC,G,IAAG1B,EAAQ0B,EAAR1B,SAAUC,EAAKyB,EAALzB,MACjBQ,QAAQC,IAAI,uBAAwCiB,OAAf3B,EAAS,QAAY2B,OAAN1B,EAAM,M,IAE3D2B,OAAM,SAAAF,G,IAAG1B,EAAQ0B,EAAR1B,SAAUC,EAAKyB,EAALzB,MAClBQ,QAAQC,IAAI,sBAAqCiB,OAAf3B,EAAS,QAAY2B,OAAN1B,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["// HTML містить розмітку форми, в поля якої користувач буде вводити першу затримку в мілісекундах,\n// крок збільшення затримки для кожного промісу після першого і кількість промісів, яку необхідно створити.\n\n// Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) стільки разів,\n// скільки ввели в поле amount. Під час кожного виклику передай їй номер промісу (position), що створюється,\n// і затримку, враховуючи першу затримку (delay), введену користувачем, і крок (step).\n\n// Доповни код функції createPromise таким чином, щоб вона повертала один проміс,\n// який виконується або відхиляється через delay часу. Значенням промісу повинен бути об'єкт,\n// в якому будуть властивості position і delay зі значеннями однойменних параметрів.\n// Використовуй початковий код функції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      console.log(shouldResolve);\n\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nconst form = document.querySelector('form.form');\n// console.log('🚀 ~ file: 03-promises.js:24 ~ form:', form);\n\nform.addEventListener('submit', event => {\n  event.preventDefault();\n  const delay = Number(form.elements.delay.value);\n  //   console.log('🚀 ~ file: 03-promises.js:28 ~ delay:', delay);\n  const step = Number(form.elements.step.value);\n  //   console.log('🚀 ~ file: 03-promises.js:30 ~ step:', step);\n  const amount = Number(form.elements.amount.value);\n  //   console.log('🚀 ~ file: 03-promises.js:32 ~ amount:', amount);\n\n  let position = 0;\n\n  for (let i = 1; i <= amount; i += 1) {\n    position += i;\n\n    const promiseDelay = delay + (i - 1) * step;\n\n    createPromise(position, promiseDelay)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n});\n"],"names":["$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","shouldResolve","Math","random","console","log","$ce04d3a99e08e73b$var$form","document","querySelector","addEventListener","event","preventDefault","delay1","Number","elements","value","step","amount","position1","i","then","param","concat","catch"],"version":3,"file":"03-promises.a6d14bcc.js.map"}